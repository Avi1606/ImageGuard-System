{"ast":null,"code":"// Update the relevant parts of Gallery.js\n\n// In the addToMLIndex function:\nconst addToMLIndex = async imageId => {\n  setIndexingStates(prev => ({\n    ...prev,\n    [imageId]: true\n  }));\n  try {\n    const response = await axios.post(`/api/ml-detection/add-to-index/${imageId}`);\n    if (response.data.success) {\n      if (response.data.alreadyIndexed) {\n        toast.info('Image was already in ML index');\n      } else {\n        toast.success('Image added to ML index successfully!');\n      }\n\n      // Update the image status in the local state\n      setImages(prev => prev.map(img => img._id === imageId ? {\n        ...img,\n        status: 'indexed',\n        mlIndex: {\n          isIndexed: true,\n          indexedAt: new Date()\n        }\n      } : img));\n    }\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response2, _error$response2$data;\n    console.error('Error adding to index:', error);\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.details) || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to add to ML index';\n    toast.error(errorMessage);\n  } finally {\n    setIndexingStates(prev => ({\n      ...prev,\n      [imageId]: false\n    }));\n  }\n};\n\n// Update the status check in the render:\n// Replace: image.status !== 'indexed'\n// With: !image.mlIndex?.isIndexed && image.status !== 'indexed'\n\n// Replace: image.status === 'indexed'\n// With: image.mlIndex?.isIndexed || image.status === 'indexed'","map":{"version":3,"names":["addToMLIndex","imageId","setIndexingStates","prev","response","axios","post","data","success","alreadyIndexed","toast","info","setImages","map","img","_id","status","mlIndex","isIndexed","indexedAt","Date","error","_error$response","_error$response$data","_error$response2","_error$response2$data","console","errorMessage","details"],"sources":["D:/Brave Download/TImes Project/client/src/pages/Gallery.js"],"sourcesContent":["// Update the relevant parts of Gallery.js\r\n\r\n// In the addToMLIndex function:\r\nconst addToMLIndex = async (imageId) => {\r\n    setIndexingStates(prev => ({ ...prev, [imageId]: true }));\r\n\r\n    try {\r\n        const response = await axios.post(`/api/ml-detection/add-to-index/${imageId}`);\r\n\r\n        if (response.data.success) {\r\n            if (response.data.alreadyIndexed) {\r\n                toast.info('Image was already in ML index');\r\n            } else {\r\n                toast.success('Image added to ML index successfully!');\r\n            }\r\n\r\n            // Update the image status in the local state\r\n            setImages(prev => prev.map(img =>\r\n                img._id === imageId ? {\r\n                    ...img,\r\n                    status: 'indexed',\r\n                    mlIndex: { isIndexed: true, indexedAt: new Date() }\r\n                } : img\r\n            ));\r\n        }\r\n    } catch (error) {\r\n        console.error('Error adding to index:', error);\r\n        const errorMessage = error.response?.data?.details || error.response?.data?.error || 'Failed to add to ML index';\r\n        toast.error(errorMessage);\r\n    } finally {\r\n        setIndexingStates(prev => ({ ...prev, [imageId]: false }));\r\n    }\r\n};\r\n\r\n// Update the status check in the render:\r\n// Replace: image.status !== 'indexed'\r\n// With: !image.mlIndex?.isIndexed && image.status !== 'indexed'\r\n\r\n// Replace: image.status === 'indexed'\r\n// With: image.mlIndex?.isIndexed || image.status === 'indexed'"],"mappings":"AAAA;;AAEA;AACA,MAAMA,YAAY,GAAG,MAAOC,OAAO,IAAK;EACpCC,iBAAiB,CAACC,IAAI,KAAK;IAAE,GAAGA,IAAI;IAAE,CAACF,OAAO,GAAG;EAAK,CAAC,CAAC,CAAC;EAEzD,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,kCAAkCL,OAAO,EAAE,CAAC;IAE9E,IAAIG,QAAQ,CAACG,IAAI,CAACC,OAAO,EAAE;MACvB,IAAIJ,QAAQ,CAACG,IAAI,CAACE,cAAc,EAAE;QAC9BC,KAAK,CAACC,IAAI,CAAC,+BAA+B,CAAC;MAC/C,CAAC,MAAM;QACHD,KAAK,CAACF,OAAO,CAAC,uCAAuC,CAAC;MAC1D;;MAEA;MACAI,SAAS,CAACT,IAAI,IAAIA,IAAI,CAACU,GAAG,CAACC,GAAG,IAC1BA,GAAG,CAACC,GAAG,KAAKd,OAAO,GAAG;QAClB,GAAGa,GAAG;QACNE,MAAM,EAAE,SAAS;QACjBC,OAAO,EAAE;UAAEC,SAAS,EAAE,IAAI;UAAEC,SAAS,EAAE,IAAIC,IAAI,CAAC;QAAE;MACtD,CAAC,GAAGN,GACR,CAAC,CAAC;IACN;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACZC,OAAO,CAACL,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMM,YAAY,GAAG,EAAAL,eAAA,GAAAD,KAAK,CAACjB,QAAQ,cAAAkB,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBf,IAAI,cAAAgB,oBAAA,uBAApBA,oBAAA,CAAsBK,OAAO,OAAAJ,gBAAA,GAAIH,KAAK,CAACjB,QAAQ,cAAAoB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBjB,IAAI,cAAAkB,qBAAA,uBAApBA,qBAAA,CAAsBJ,KAAK,KAAI,2BAA2B;IAChHX,KAAK,CAACW,KAAK,CAACM,YAAY,CAAC;EAC7B,CAAC,SAAS;IACNzB,iBAAiB,CAACC,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACF,OAAO,GAAG;IAAM,CAAC,CAAC,CAAC;EAC9D;AACJ,CAAC;;AAED;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}